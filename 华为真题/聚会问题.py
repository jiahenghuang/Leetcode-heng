#coding:utf-8
# 举办一场8小时的聚会，时间段从12：00到20：00点，让来访的客人事先填好到达的时间和离开的时间，为了掌握聚会期间的座位数目，需要先估计不同时间的最大客人数量。
# 1.到达和离开的时间，以整点计算，输入为整数，比如“12，18”表示客人到达的时间为12点后13点前，离开的时间是17点后18点前。
# 2.按小时区间统计客人的数量，需要统计[12，13),[13,14)….[19，20)共有8个时间段的最大客人数量。
# 3.假设邀请的客人最多100个。
# 假设输入：

# 12,15
# 16,17
# 12,20
# -1,-1

# 程序要求的输出结果为：

# [12,13):2
# [13,14):2
# [14,15):2
# [15,16):1
# [16,17):2
# [17,18):1
# [18,19):1
# [19,20):1

#思想写出来了，没有用到什么数据结构的知识。。。时间复杂度可以接受。

class Solution():
    def party_num(self,llist):
        time_dict = {}
        for i in range(12,20):
            time_dict[(i,i+1)]=0
        for start, end in llist:
            if start != -1 and end != -1:
                for i in range(start,end):
                    time_dict[(start,start+1)] += 1
        for i in range(12,20):
            print('[%d,%d]:%d'%(i,i+1,time_dict[(i,i+1)]))


if __name__=='__main__':
    input_list = [()]




